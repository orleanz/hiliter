"use strict";

var PRESET = ['ru-ua', 'ua-ru', 'ru-by', 'by-ru', 'ua-by', 'by-ua'];

var INITIAL_STATUS = "false";

$(document).keydown(function(event) {

  var tag = event.target.tagName.toUpperCase();
  if (tag == "INPUT" || tag == "TEXTAREA") {
    return;
  } 

  if (event.which == 37) {
    moveLeft();
  } else if (event.which == 39) {
    moveRight();
  }
});


buildSelectorList();
buildTable();

$("#bulkInputToggle").click(function() { $("#bulkInput").slideToggle()});

$("#reset").click(function() { 

  if (confirm("Reset to default settings now? All modifications will be lost.\n\n" + 
    "You can cancel now and make a backup copy of current dictionary, see 'Export JSON' option below.")) {

    localStorage.removeItem("current_pair");
    localStorage.removeItem("pageNum");
    localStorage.removeItem("toolEnabled");
    localStorage.removeItem("searchToken");

    localStorage.removeItem("currentDict");
    localStorage.removeItem("currentDictName");
    localStorage.removeItem("currentDictModified");

    var names = JSON.parse(localStorage.getItem("customDictNames") || "[]");
    for (var i = 0; i < names.length; i++) {
      localStorage.removeItem("customDict-" + names[i]);
    }
    localStorage.removeItem("customDictNames");

    localStorage.removeItem("useInlineReplacement");
    localStorage.removeItem("lastOpDuration");
      
    window.location.reload(true);
  }

});



function buildSelectorList() {

  var selector = $("#selector");
  selector.empty();

  for (var i = 0; i < PRESET.length; i++) {
    var name = PRESET[i];
    var opt = document.createElement("option");
    opt.val = name;
    opt.setAttribute("preset", "1");
    opt.textContent = name;
    selector.append(opt);
  }

  var names = JSON.parse(localStorage.getItem("customDictNames") || "[]");
  for (var i = 0; i < names.length; i++) {
    var name = names[i];
    var opt = document.createElement("option");
    opt.val = name;
    opt.textContent = name;
    selector.append(opt);
  }

}


function showSwitch() {

  var status = localStorage.getItem("toolEnabled") || INITIAL_STATUS;
  var sp = document.getElementById("toolStatus");
  sp.style.marginRight = "1em";

  var btn = document.getElementById("toolStatusBtn");

  if (status === "true") {
    sp.parentNode.style.backgroundColor = "lightgreen";
    sp.textContent = "Hiliter ENABLED";
    btn.textContent = "disable";
  } else {
    sp.parentNode.style.backgroundColor = "pink";
    sp.textContent = "Hiliter DISABLED";
    btn.textContent = "enable";
  }
  
}

$("#selector").change(function() {

  var dictname = $("#selector").val();

  var go = true;
  if (localStorage.getItem("currentDictModified") != "no") {
    go = confirm('Replace current dictionary with ' + dictname + "?\n\nUnsaved changes will be lost. You can cancel now and save current modified dictionary under custom name.");
  }

  if (go) {

    localStorage.setItem("currentDictName", dictname);
    localStorage.setItem("currentDictModified", "no");
   
    if (PRESET.indexOf(dictname) == -1) {

      localStorage.setItem("currentDict", localStorage.getItem("customDict-" + dictname));
    
    } else {

      if ( DICTS[dictname] ) {

        localStorage.setItem("currentDict", JSON.stringify( DICTS[dictname] ));

      } else {
        
        var tmp = dictname.split("-");
        dictname = tmp[1] + "-" + tmp[0];
        var ar = DICTS[dictname];

        if (ar) {

          var newAr = _.map(ar, function(x) { return [x[1],x[0]];  });
          localStorage.setItem("currentDict", JSON.stringify( newAr ));

        } else {

          alert("Cannot find dictionary " + dictname);
          return;

        }
        
      }

    }

    buildTable();
  }

});


$("#useInlineReplacement").change(function() {

 if($('#useInlineReplacement').prop('checked')) {
    localStorage.setItem("useInlineReplacement", "true");
  } else {
    localStorage.setItem("useInlineReplacement", "false");
  }

});


$("#about").click(function() {

  $("#aboutBlock").slideToggle();

});


$("#exportJSONHelp").click(function() {

  alert('Use this tool to copy current dictionary table to other browser or computer.\n\n' + 
    'Paste text generated by this tool into Import JSON field.');

});


$("#importJSONHelp").click(function() {

  alert('Use this tool to import dictionary data from other browser or computer.\n\n' + 
    'Paste here the text created by the Export JSON tool, then run Import, then, optionally, save new data as named dictionary.');

});


$("#importJSON").click(function() { 

  var tmp = document.getElementById("importJSONText").value.trim();

  if (tmp == "") {
    alert("Paste here the text created by Export JSON tool.");
    return;
  }

  try {
    var ar = JSON.parse(tmp);
  } catch (e) {
    alert("Cannot parse JSON");
    return;
  }

  localStorage.setItem("currentDict", JSON.stringify(ar));
  localStorage.setItem("currentDictModified", "yes");

  window.location.reload(true);

});


$("#importLines").click(function() { 

  var s = document.getElementById("importText").value.trim();

  if (s == "") {
    alert("Enter newline-separated text into the field");
    return;
  }

  var tmp = s.split("\n");
  var ar = [];

  for (var i = 0; i < tmp.length; i++) {

    var line = tmp[i].trim();
    if (line == "..." || line == "") continue;

    var arr = line.split(":");
    if (arr.length == 2) {
      ar.push( [ arr[0], arr[1] ]);
    } else if (arr.length < 2) {
      alert("Error: line '" + line + "' does not contain separator symbol (:)");
      return;
    } else {
      alert("Error: line '" + line + "' contain multiple separator symbols (:)");
      return;      
    }
  }

  localStorage.setItem("currentDict", JSON.stringify(ar));
  localStorage.setItem("currentDictModified", "yes");

  window.location.reload(true);

});



$("#exportJSON").click(function() { 

  var ar = getDict().dict;
  document.getElementById("exportJSONText").value = JSON.stringify(ar);

});



$("#deleteDict").click(function() {

  var dictname = $("#selector").val().trim();

  if (PRESET.indexOf(dictname) != -1) {
    alert("Cannot delete builtin dictionary " + dictname + "\n\nOnly custom dictionary (saved by user) can be deleted.");
    return;
  }

  if ( confirm('Delete ' + dictname + "?") ) {

    var names = JSON.parse(localStorage.getItem("customDictNames") || "[]");

    var pos = names.indexOf(dictname);
    if (pos != -1) {
      localStorage.removeItem("customDict-" + dictname);

      names.splice(pos, 1);
      localStorage.setItem("customDictNames", JSON.stringify(names));

      localStorage.removeItem("currentDict");
      localStorage.removeItem("currentDictName");
      localStorage.removeItem("currentDictModified");

      buildSelectorList();
      buildTable();

    }

  }

});

$("#saveDict").click(function() {

  var dictname = $("#saveDictName").val().trim();

  if (dictname == "") {
    alert("Enter dictionary name");
    return;
  }

  if (PRESET.indexOf(dictname) != -1) {
    alert("Cannot use following reserved names:\n\n" + PRESET.join("\n"));
    return;
  }

  var names = JSON.parse(localStorage.getItem("customDictNames") || "[]");

  localStorage.setItem("currentDictName", dictname);
  localStorage.setItem("currentDictModified", "no");

  localStorage.setItem("customDict-" + dictname, localStorage.getItem("currentDict") );
  if (names.indexOf(dictname) == -1) {
    names.push(dictname);
    localStorage.setItem("customDictNames", JSON.stringify(names));
  }

  buildSelectorList();
  buildTable();
 
  $("#saveDictName").val("");

});



$("#toolStatusBtn").click(function() {
  var status = localStorage.getItem("toolEnabled") || INITIAL_STATUS;
  if (status === "true") {
    localStorage.setItem("toolEnabled", "false");
  } else {
    localStorage.setItem("toolEnabled", "true");
  }
  showSwitch();
});


$("#pageNum").change(function() {
  localStorage.setItem("pageNum", document.getElementById("pageNum").value);
  window.location.reload(true);
})

$("#pageSize").change(function() {
  localStorage.setItem("pageSize", document.getElementById("pageSize").value);
  window.location.reload(true);
})


$("#doSearch").click(function() { 
  var token = document.getElementById("searchToken").value.trim();

  if (token == "") {
    alert("Error - field empty");
    return;
  }

  localStorage.setItem("searchToken", token);
  window.location.reload(true);
});

$("#searchClear").click(function() { 
  localStorage.removeItem("searchToken");
  window.location.reload(true);
});




function getDict() {

  var dictname = localStorage.getItem("currentDictName");
  var dictdata = localStorage.getItem("currentDict");

  if (dictname && dictdata) {

    var ar = [];
    try {
      ar = JSON.parse(dictdata);
    } catch(e) {
      alert("corrupted data in settings");
    }

    return { "name": dictname, "dict" : ar };

  } else {

    var dictname = PRESET[0];
    localStorage.setItem("currentDictName", dictname);
    localStorage.setItem("currentDictModified", "no");
    localStorage.setItem("currentDict", JSON.stringify( DICTS[dictname] ));
    
    return { "name": dictname, "dict" : DICTS[dictname] };

  }

}


function buildTable() {

  showSwitch();

  var dictInfo = getDict();

  var ar = dictInfo.dict;
  var dictname = dictInfo.name;

  if (localStorage.getItem("currentDictModified") == "no") {
    $("#modifiedAlert").text("");
    $("#selector").val(dictname);
  } else {
    $("#modifiedAlert").text("[modified]");
  }

  var useInlineReplacement = localStorage.getItem("useInlineReplacement") || "false";
  if (useInlineReplacement == "true") {
    $("#useInlineReplacement").prop('checked', 'true');
  }

  // var lastOpDuration = localStorage.getItem("lastOpDuration") || "";
  // if (lastOpDuration) {
  //   $("#lastOpDuration").text("last replacement took " + lastOpDuration + " milliseconds");
  // }

  var token = localStorage.getItem("searchToken");
  
  if (token) {
    var newar = [];
    for (var i = 0; i < ar.length; i++) {
      if (ar[i][0].indexOf(token) != -1 || ar[i][1].indexOf(token) != -1) {
        newar.push(ar[i]);
      }
    }
    ar = newar;
    document.getElementById("searchToken").value = token;
  }  

  var tab = document.getElementById("maintab");
  $(tab).empty();

  var tr0 = document.createElement("tr");
  tr0.style.backgroundColor = "Gainsboro";

  var td0 = document.createElement('td');
  td0.style.textAlign = "left";

  var size = document.createElement("span");
  size.textContent = "total: " + ar.length + " pairs;";
  td0.appendChild(size);

  var sp1 = document.createElement("span");
  sp1.textContent = "add new pair:";
  sp1.style.margin = "0 0.5em 0 1em";
  td0.appendChild(sp1);

  td0.setAttribute("colspan", "4");
  var in1 = document.createElement("input");
  in1.id = "input1";
  in1.style.margin = "0 0.5em";
  td0.appendChild(in1);
  var in2 = document.createElement("input");
  in2.id = "input2";
  in2.style.margin = "0 0.5em";
  td0.appendChild(in2);
  var btn = document.createElement("button");
  btn.appendChild(document.createTextNode("add"));
  td0.appendChild(btn);

  btn.addEventListener("click", function() {

    var pageNum = localStorage.getItem("pageNum") || 1;
    var pageSize = 1*localStorage.getItem("pageSize") || 10;

    var v1 = $("#input1").val().trim();
    var v2 = $("#input2").val().trim();

    if (v1 == "" || v2 == "") {
      alert("Entry text in both fields");
      return;
    }

    var dictInfo = getDict(); 
    var ar = dictInfo.dict;

    var curpos = pageSize * (pageNum-1);
    ar.splice(curpos, 0, [v1 , v2 ]);

    localStorage.setItem("currentDict", JSON.stringify(ar));
    localStorage.setItem("currentDictModified", "yes");

    window.location.reload(true);
  });


  tr0.appendChild(td0);
  tab.appendChild(tr0);

  var pageSize = localStorage.getItem("pageSize") || 10;
  var pageNum = localStorage.getItem("pageNum") || 1;

  var pageCnt = ar.length > 0 ? Math.ceil(ar.length/pageSize) : 1;
  if (pageNum > pageCnt) pageNum = pageCnt;

  for (var k = 1; k <= pageCnt; k++) {
    var opt = document.createElement("option");
    opt.value = k;
    opt.textContent = k;
    document.getElementById("pageNum").appendChild(opt);
  }

  document.getElementById("pageSize").value = pageSize;
  document.getElementById("pageNum").value = pageNum;

  for (var i = pageSize * (pageNum-1); i < pageSize * pageNum && i < ar.length; i++) {

    var tr = document.createElement('tr');

    var td0 = document.createElement('td');
    td0.textContent = "[" + (i + 1) + "]";
    td0.style.color = "darkblue";
    td0.style.textDecoration = "underline";
    td0.style.cursor = "pointer";
    td0.title = "click to edit this word pair";

    td0.pair = ar[i][0] + ":" + ar[i][1];
    td0.addEventListener('click', function() {

      var tmp = this.pair.split(":");

      var w1 = prompt("enter new spelling for word 1", tmp[0]);
      if (!w1) return;

      var w2 = prompt("enter new spelling for word 2", tmp[1]);
      if (!w2) return;

      if (confirm("Replace current pair\n\n" + this.pair.replace(":", " : ") + "\n\nwith\n\n" + w1 +" : " + w2 + "\n\n?")) {
        
        var dictInfo = getDict(); 
        var ar = dictInfo.dict;

        var newAr = [];
        for (var i = 0; i < ar.length; i++) {
          if (ar[i][0] + ":" + ar[i][1] == this.pair) {
            newAr.push([w1, w2]);
          } else {
            newAr.push(ar[i]);
          }
        }

        localStorage.setItem("currentDict", JSON.stringify(newAr));
        localStorage.setItem("currentDictModified", "yes");

        window.location.reload(true);

      }
        
    })

    var td1 = document.createElement('td');
    td1.textContent = ar[i][0];
    td1.style.textAlign = "right";
    td1.style.width = "40%";
    td1.style.borderBottom = "1px solid Gainsboro";

    var td2 = document.createElement('td');
    td2.textContent = ar[i][1];
    td2.style.textAlign = "left";
    td2.style.width = "40%";
    td2.style.borderBottom = "1px solid Gainsboro";

    var current_pair = localStorage.getItem("current_pair");

    var td3 = document.createElement('td');
    td3.pair = ar[i][0] + ":" + ar[i][1];

    td3.style.cursor = "pointer";
    var img = document.createElement("img");
    img.src = "delete.png";
    img.style.width = "16px";
    td3.appendChild(img);
    td3.style.borderBottom = "1px solid Gainsboro";

    td3.addEventListener("click", function() {

      localStorage.setItem("current_pair", this.parentNode.previousSibling.firstChild.pair);

      var dictInfo = getDict(); 
      var ar = dictInfo.dict;

      var newAr = [];
      for (var i = 0; i < ar.length; i++) {
        if (ar[i][0] + ":" + ar[i][1] != this.pair) {
          newAr.push(ar[i]);
        }
      }

      localStorage.setItem("currentDict", JSON.stringify(newAr));
      localStorage.setItem("currentDictModified", "yes");

      buildTable();

    });

    tr.appendChild(td0);
    tr.appendChild(td1);
    tr.appendChild(td2);
    tr.appendChild(td3);

    tab.appendChild(tr);
  }

  var tr = document.createElement('tr');
  var td = document.createElement('td');
  td.setAttribute("colspan", "4");
  td.style.border = "0";
  td.style.textAlign = "center";
  
  var btn1 = document.createElement("button");
  btn1.textContent = "page back";
  btn1.style.cssFloat = "left";
  btn1.addEventListener("click", moveLeft);
  td.appendChild(btn1);

  var span = document.createElement("span");
  span.textContent = "keyboard: arrows left / right to move page";
  span.style.color = "gray";
  span.style.fontSize = "small";
  td.appendChild(span);

  var btn2 = document.createElement("button");
  btn2.textContent = "page forward";
  btn2.style.cssFloat = "right";
  btn2.addEventListener("click", moveRight);
  td.appendChild(btn2);

  tr.appendChild(td);
  tab.appendChild(tr);


}


function moveLeft() {
  
  var dictInfo = getDict(); 
  var ar = dictInfo.dict;

  var pageSize = localStorage.getItem("pageSize") || 10;
  var pageCnt = ar.length > 0 ? Math.ceil(ar.length/pageSize) : 1;
  var num = 1 * localStorage.getItem("pageNum") || 1;

  var num = 1 * localStorage.getItem("pageNum");
  if (num > 1) {
    localStorage.setItem("pageNum", num - 1);
    buildTable();
  } else {
    alert("first page reached");
  }

}

function moveRight() {
  
  var dictInfo = getDict(); 
  var ar = dictInfo.dict;
  
  var pageSize = localStorage.getItem("pageSize") || 10;
  var pageCnt = ar.length > 0 ? Math.ceil(ar.length/pageSize) : 1;
  var num = 1 * localStorage.getItem("pageNum") || 1;

  if (num < pageCnt) {
    localStorage.setItem("pageNum", num + 1);
    buildTable();
  } else {
    alert("last page reached");
  }

}

